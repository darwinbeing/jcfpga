!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
COUNTER_BITS	BASIC_UART.vhd	/^  constant COUNTER_BITS : natural := integer(ceil(log2(real(DIVISOR))));$/;"	c
SPI_DATA	SREG_CORE.vhd	/^	constant SPI_DATA : std_logic_vector(95 downto 0) := ds_sreg_col_testmux_pon & ds_sreg_comp_pon & ds_sreg_count_mem_bias_pon & ds_sreg_count_clk_lvds_rx_pon & ds_sreg_digif_lvds_rx_pon & ds_sreg_ref_vref_lvds_tx_pon & ds_sreg_ref_vref_bias_pon & ds_sreg_ref_vref_ramp_ota_hi_pow & ds_sreg_ref_vref_ramp_pon & ds_sreg_nc & d_sreg_col_testmux_en & d_sreg_comp_bias & d_sreg_comp_bias_drvr & d_sreg_count_mem_ctrl_bias & d_sreg_count_mem_ctrl_zero_bias & d_sreg_force_en & d_sreg_force_coeff & d_sreg_count_clk_lvds_rx_dc_on & d_sreg_count_clk_lvds_rx_bias_adj & d_sreg_digif_lvds_rx_dc_on & d_sreg_digif_lvds_rx_bias_adj & d_sreg_digif_serial_msblsb_mode & d_sreg_digif_test & d_sreg_ref_vref_lvds_tx_bias_adj & d_sreg_ref_vref_lvds_tx_vdac_cm_sel & d_sreg_ref_vref_bias_test_en & d_sreg_ref_vref_ramp_rst_vdac & d_sreg_ref_vref_ramp_slew_ctrl & d_sreg_ref_vref_ramp_test & d_sreg_col_adc_ctrl_test & d_sreg_digif_lvds_tx_core_cmfb_off & d_sreg_vln_vbpc_bypass & d_sreg_vln_bias;$/;"	c
SREG_CONTROL	SREG_CONTROL.vhd	/^entity SREG_CONTROL is$/;"	e
SREG_CORE	SREG_CORE.vhd	/^entity SREG_CORE is$/;"	e
T_SERIAL	T_SERIAL.vhd	/^entity T_SERIAL is$/;"	e
basic_uart	BASIC_UART.vhd	/^entity basic_uart is$/;"	e
bits	BASIC_UART.vhd	/^    counter: std_logic_vector(3 downto 0); -- tick count$/;"	r
counter	BASIC_UART.vhd	/^    fsm_state: fsm_state_t;                -- FSM state$/;"	r
counter	BASIC_UART.vhd	/^    fsm_state: fsm_state_t; -- FSM state$/;"	r
d_sreg_col_adc_ctrl_test	SREG_CORE.vhd	/^	constant d_sreg_col_adc_ctrl_test				: std_logic_vector(3 downto 0) := "0000";		-- vectors are mirrored in SREG$/;"	c
d_sreg_col_testmux_en	SREG_CORE.vhd	/^	constant d_sreg_col_testmux_en					: std_logic := '0';$/;"	c
d_sreg_comp_bias	SREG_CORE.vhd	/^	constant d_sreg_comp_bias					: std_logic_vector(3 downto 0) := "1100";		-- vectors are mirrored in SREG$/;"	c
d_sreg_comp_bias_drvr	SREG_CORE.vhd	/^	constant d_sreg_comp_bias_drvr					: std_logic_vector(3 downto 0) := "1111";		-- vectors are mirrored in SREG$/;"	c
d_sreg_count_clk_lvds_rx_bias_adj	SREG_CORE.vhd	/^	constant d_sreg_count_clk_lvds_rx_bias_adj			: std_logic_vector(3 downto 0) := "1110";		-- vectors are mirrored in SREG$/;"	c
d_sreg_count_clk_lvds_rx_dc_on	SREG_CORE.vhd	/^	constant d_sreg_count_clk_lvds_rx_dc_on				: std_logic := '0';$/;"	c
d_sreg_count_mem_ctrl_bias	SREG_CORE.vhd	/^	constant d_sreg_count_mem_ctrl_bias				: std_logic_vector(5 downto 0) := "100001";		-- vectors are mirrored in SREG "100001"$/;"	c
d_sreg_count_mem_ctrl_zero_bias	SREG_CORE.vhd	/^	constant d_sreg_count_mem_ctrl_zero_bias			: std_logic_vector(5 downto 0) := "001001";		-- vectors are mirrored in SREG "001001"$/;"	c
d_sreg_digif_lvds_rx_bias_adj	SREG_CORE.vhd	/^	constant d_sreg_digif_lvds_rx_bias_adj				: std_logic_vector(3 downto 0) := "1110";		-- vectors are mirrored in SREG$/;"	c
d_sreg_digif_lvds_rx_dc_on	SREG_CORE.vhd	/^	constant d_sreg_digif_lvds_rx_dc_on				: std_logic := '0';$/;"	c
d_sreg_digif_lvds_tx_core_cmfb_off	SREG_CORE.vhd	/^	constant d_sreg_digif_lvds_tx_core_cmfb_off			: std_logic := '0';$/;"	c
d_sreg_digif_serial_msblsb_mode	SREG_CORE.vhd	/^	constant d_sreg_digif_serial_msblsb_mode			: std_logic := '0';$/;"	c
d_sreg_digif_test	SREG_CORE.vhd	/^	constant d_sreg_digif_test					: std_logic_vector(2 downto 0) := "000";		-- vectors are mirrored in SREG$/;"	c
d_sreg_force_coeff	SREG_CORE.vhd	/^	constant d_sreg_force_coeff					: std_logic_vector(3 downto 0) := "1100";		-- vectors are mirrored in SREG$/;"	c
d_sreg_force_en	SREG_CORE.vhd	/^	constant d_sreg_force_en					: std_logic := '0';$/;"	c
d_sreg_ref_vref_bias_test_en	SREG_CORE.vhd	/^	constant d_sreg_ref_vref_bias_test_en				: std_logic := '0';$/;"	c
d_sreg_ref_vref_lvds_tx_bias_adj	SREG_CORE.vhd	/^	constant d_sreg_ref_vref_lvds_tx_bias_adj			: std_logic_vector(3 downto 0) := "0000";		-- vectors are mirrored in SREG$/;"	c
d_sreg_ref_vref_lvds_tx_vdac_cm_sel	SREG_CORE.vhd	/^	constant d_sreg_ref_vref_lvds_tx_vdac_cm_sel			: std_logic_vector(3 downto 0) := "0001";		-- vectors are mirrored in SREG$/;"	c
d_sreg_ref_vref_ramp_rst_vdac	SREG_CORE.vhd	/^	constant d_sreg_ref_vref_ramp_rst_vdac				: std_logic_vector(3 downto 0) := "1011";		-- vectors are mirrored in SREG$/;"	c
d_sreg_ref_vref_ramp_slew_ctrl	SREG_CORE.vhd	/^	constant d_sreg_ref_vref_ramp_slew_ctrl				: std_logic_vector(5 downto 0) := "010110";		-- vectors are mirrored in SREG$/;"	c
d_sreg_ref_vref_ramp_test	SREG_CORE.vhd	/^	constant d_sreg_ref_vref_ramp_test				: std_logic_vector(6 downto 0) := "0000000";		-- vectors are mirrored in SREG$/;"	c
d_sreg_vln_bias	SREG_CORE.vhd	/^	constant d_sreg_vln_bias					: std_logic_vector(7 downto 0) := "11110000";		-- vectors are mirrored in SREG$/;"	c
d_sreg_vln_vbpc_bypass	SREG_CORE.vhd	/^	constant d_sreg_vln_vbpc_bypass					: std_logic := '0';$/;"	c
ds_sreg_col_testmux_pon	SREG_CORE.vhd	/^	constant ds_sreg_col_testmux_pon				: std_logic := '0';$/;"	c
ds_sreg_comp_pon	SREG_CORE.vhd	/^	constant ds_sreg_comp_pon					: std_logic := '1';	$/;"	c
ds_sreg_count_clk_lvds_rx_pon	SREG_CORE.vhd	/^	constant ds_sreg_count_clk_lvds_rx_pon				: std_logic := '1';$/;"	c
ds_sreg_count_mem_bias_pon	SREG_CORE.vhd	/^	constant ds_sreg_count_mem_bias_pon				: std_logic := '1';$/;"	c
ds_sreg_digif_lvds_rx_pon	SREG_CORE.vhd	/^	constant ds_sreg_digif_lvds_rx_pon				: std_logic := '1';$/;"	c
ds_sreg_nc	SREG_CORE.vhd	/^	constant ds_sreg_nc						: std_logic_vector(6 downto 0) := "0000000";		-- vectors are mirrored in SREG you are typing (LSB - MSB) here$/;"	c
ds_sreg_photocore_row_pon	SREG_CORE.vhd	/^	constant ds_sreg_photocore_row_pon				: std_logic := '1';$/;"	c
ds_sreg_ref_vref_bias_pon	SREG_CORE.vhd	/^	constant ds_sreg_ref_vref_bias_pon				: std_logic := '1';$/;"	c
ds_sreg_ref_vref_lvds_tx_pon	SREG_CORE.vhd	/^	constant ds_sreg_ref_vref_lvds_tx_pon				: std_logic := '1';	$/;"	c
ds_sreg_ref_vref_ramp_ota_hi_pow	SREG_CORE.vhd	/^	constant ds_sreg_ref_vref_ramp_ota_hi_pow			: std_logic := '1';	$/;"	c
ds_sreg_ref_vref_ramp_pon	SREG_CORE.vhd	/^	constant ds_sreg_ref_vref_ramp_pon				: std_logic := '1';$/;"	c
ds_sreg_vln_en	SREG_CORE.vhd	/^	constant ds_sreg_vln_en						: std_logic := '1';$/;"	c
enable	BASIC_UART.vhd	/^    nbits: std_logic_vector(3 downto 0);   -- number of received bits (includes start bit)$/;"	r
fsm_state	BASIC_UART.vhd	/^  record$/;"	r
fsm_state	T_SERIAL.vhd	/^record$/;"	r
fsm_state_t	BASIC_UART.vhd	/^  type fsm_state_t is (idle, active); -- common to both RX and TX FSM$/;"	t
fsm_state_t	T_SERIAL.vhd	/^type fsm_state_t is (idle, received, emitting);$/;"	t
nbits	BASIC_UART.vhd	/^    bits: std_logic_vector(7 downto 0);    -- received bits$/;"	r
nbits	BASIC_UART.vhd	/^    bits: std_logic_vector(8 downto 0); -- bits to emit, includes start bit$/;"	r
ready	BASIC_UART.vhd	/^    nbits: std_logic_vector(3 downto 0); -- number of bits left to send$/;"	r
rx_state_t	BASIC_UART.vhd	/^  type rx_state_t is$/;"	t
state_t	T_SERIAL.vhd	/^type state_t is$/;"	t
tx_data	T_SERIAL.vhd	/^  fsm_state: fsm_state_t; -- FSM state$/;"	r
tx_enable	T_SERIAL.vhd	/^  tx_data: std_logic_vector(7 downto 0);$/;"	r
tx_state_t	BASIC_UART.vhd	/^  type tx_state_t is$/;"	t
